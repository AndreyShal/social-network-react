{"version":3,"file":"static/js/785.c4e0fddb.chunk.js","mappings":"4LACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,yB,SCI5FA,EAAU,SAACC,GACpB,OAAO,gBAAKC,UAAWC,EAAAA,OAAhB,SAA2BF,EAAMG,WCN5C,SAASC,EAAEC,GAAG,IAAIC,EAAEC,EAAEC,EAAE,GAAG,GAAG,iBAAiBH,GAAG,iBAAiBA,EAAEG,GAAGH,OAAO,GAAG,iBAAiBA,EAAE,GAAGI,MAAMC,QAAQL,GAAG,CAAC,IAAIM,EAAEN,EAAEO,OAAO,IAAIN,EAAE,EAAEA,EAAEK,EAAEL,IAAID,EAAEC,KAAKC,EAAEH,EAAEC,EAAEC,OAAOE,IAAIA,GAAG,KAAKA,GAAGD,QAAQ,IAAIA,KAAKF,EAAEA,EAAEE,KAAKC,IAAIA,GAAG,KAAKA,GAAGD,GAAG,OAAOC,EAAiI,MAAxH,WAAgB,IAAI,IAAIH,EAAEC,EAAEC,EAAE,EAAEC,EAAE,GAAGG,EAAEE,UAAUD,OAAOL,EAAEI,EAAEJ,KAAKF,EAAEQ,UAAUN,MAAMD,EAAEF,EAAEC,MAAMG,IAAIA,GAAG,KAAKA,GAAGF,GAAG,OAAOE,G,UCSjWM,EAAa,SAACd,GACvB,IAAMe,EAAI,mBAAef,EAAMgB,IAC/B,OAAO,gBAAKf,UAAWgB,EAAKf,EAAAA,OAASA,EAAAA,QAA9B,UAAyC,SAAC,KAAD,CAASgB,GAAIH,EAAb,SAAoBf,EAAMmB,U,8BC0BxEC,EAAiB,SAACpB,GAEpB,IAAMqB,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,eAAgB,IAEpBC,SAAU,SAAAC,GACN,IAAMC,EAA0B,GAC1BH,EAAiBE,EAAOF,eAO9B,OANII,EAAAA,EAAAA,GAAWJ,KACXG,EAAOH,gBAAiBI,EAAAA,EAAAA,GAAWJ,KAEnCK,EAAAA,EAAAA,GAAY,GAAZA,CAAgBL,KAChBG,EAAOH,gBAAiBK,EAAAA,EAAAA,GAAY,GAAZA,CAAgBL,IAErCG,GAEXG,SAAU,SAAAJ,GACN1B,EAAM+B,WAAWL,EAAOF,gBACxBH,EAAOW,eAIf,OAAO,iBAAMF,SAAUT,EAAOY,aAAvB,UACH,4BACI,SAAC,IAAD,CACIC,YAAa,qBACbf,KAAK,iBACLgB,MAAOd,EAAOK,OAAOF,eACrBY,SAAUf,EAAOgB,aACrBC,QAASjB,EAAOiB,QAAQd,eAAgBG,OAAQN,EAAOM,OAAOH,kBAC9D,mBAAQe,KAAM,SAAd,+B,6BCjCZ,GAAeC,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KAhBpB,SAACC,GAAD,MAA6C,CAC7DC,YAAaD,EAAMC,YACnBC,OAAQF,EAAMG,KAAKD,WAOA,SAACE,GACxB,MAAO,CACHf,WAAY,SAACgB,GACTD,GAASE,EAAAA,EAAAA,GAAwBD,SAI2CE,EAAAA,EAAxF,ED3BuB,SAACjD,GACpB,IAAMkD,EAAUlD,EAAM2C,YAAYO,QAC5BC,EAAWnD,EAAM2C,YAAYQ,SAEnC,OACI,iBAAKlD,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKgD,EAAQE,KAAI,SAACC,GACV,OAAO,SAACvC,EAAD,CAAwBE,GAAIqC,EAAGrC,GAAIG,KAAMkC,EAAGlC,MAA3BkC,EAAGrC,UAGnC,gBAAKf,UAAWC,EAAAA,SAAhB,SACKiD,EAASC,KAAI,SAAAC,GACV,OAAO,SAACtD,EAAD,CAAqBI,QAASkD,EAAGlD,SAAnBkD,EAAGrC,UAGhC,SAACI,EAAD,CAAgBW,WAAY,SAACI,GAAD,OAAWnC,EAAM+B,WAAWI","sources":["webpack://social-network-react/./src/components/Dialogs/dialogs.module.css?1969","components/Dialogs/Message/Message.tsx","../node_modules/clsx/dist/clsx.mjs","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"dialogs_dialogs__L4ZEg\",\"dialogsItems\":\"dialogs_dialogsItems__Th7bf\",\"active\":\"dialogs_active__xuKOj\"};","import s from \"../dialogs.module.css\";\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\nexport const Message = (props: MessagePropsType) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import s from \"../dialogs.module.css\"\r\nimport clsx from \"clsx\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n    const path = `/dialogs/${props.id}`;\r\n    return <div className={clsx(s.dialog,s.active)}><NavLink to={path}>{props.name}</NavLink></div>\r\n}\r\n","import s from \"./dialogs.module.css\"\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {useFormik} from \"formik\";\r\nimport {Textarea} from \"../common/Preloader/FormsControls/FormsControls\";\r\nimport {maxLengthFn, requiredFn} from \"../../utils/validators/validators\";\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    const dialogs = props.dialogsPage.dialogs;\r\n    const messages = props.dialogsPage.messages;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogs.map((el) => {\r\n                    return <DialogItem key={el.id} id={el.id} name={el.name}/>\r\n                })}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messages.map(el => {\r\n                    return <Message key={el.id} message={el.message}/>\r\n                })}\r\n            </div>\r\n            <AddMessageForm addMessage={(value) => props.addMessage(value)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormikErrorType = {\r\n    newMessageBody?: string\r\n}\r\n\r\ntype AddMessageForm = {\r\n    addMessage: (value: string) => void\r\n}\r\n\r\nconst AddMessageForm = (props: AddMessageForm) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newMessageBody: \"\",\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {}\r\n            const newMessageBody = values.newMessageBody\r\n            if (requiredFn(newMessageBody)) {\r\n                errors.newMessageBody = requiredFn(newMessageBody)\r\n            }\r\n            if (maxLengthFn(30)(newMessageBody)) {\r\n                errors.newMessageBody = maxLengthFn(30)(newMessageBody)\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.addMessage(values.newMessageBody)\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <div>\r\n            <Textarea\r\n                placeholder={\"Enter your message\"}\r\n                name=\"newMessageBody\"\r\n                value={formik.values.newMessageBody}\r\n                onChange={formik.handleChange}\r\n            touched={formik.touched.newMessageBody} errors={formik.errors.newMessageBody}/>\r\n            <button type={\"submit\"}>add message</button>\r\n        </div>\r\n    </form>\r\n}","import {addMessageActionCreator, DialogPageType} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    addMessage: (text: string) => void\r\n}\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchToProps\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n})\r\n\r\n// const mapStateToPropsForRedirect = (state: AppStateType): {isAuth: boolean} => ({\r\n//     isAuth: state.auth.isAuth\r\n// })\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        addMessage: (text: string) => {\r\n            dispatch(addMessageActionCreator(text))\r\n        },\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,mapDispatchToProps),withAuthRedirect)(Dialogs)"],"names":["Message","props","className","s","message","r","e","t","f","n","Array","isArray","o","length","arguments","DialogItem","path","id","clsx","to","name","AddMessageForm","formik","useFormik","initialValues","newMessageBody","validate","values","errors","requiredFn","maxLengthFn","onSubmit","addMessage","resetForm","handleSubmit","placeholder","value","onChange","handleChange","touched","type","compose","connect","state","dialogsPage","isAuth","auth","dispatch","text","addMessageActionCreator","withAuthRedirect","dialogs","messages","map","el"],"sourceRoot":""}