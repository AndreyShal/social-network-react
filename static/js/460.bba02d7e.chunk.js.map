{"version":3,"file":"static/js/460.bba02d7e.chunk.js","mappings":"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","sources":["webpack://social-network-react/./src/components/Profile/ProfileInfo/profileInfo.module.css?987e","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-network-react/./src/components/Profile/MyPosts/myPost.module.css?89e8","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"mainPhoto\":\"profileInfo_mainPhoto__7m-36\"};","import React, {ChangeEvent} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusType> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        // debugger; // eslint-disable-line no-debugger\r\n        console.log(\"this\",this)\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n       this.setState({status: e.currentTarget.value})\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<Record<string, never>>, snapshot?: any) {\r\n        if(prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{display: \"flex\"}}>status:\r\n                {!this.state.editMode &&\r\n                  <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || \"no status\"}</span>\r\n                  </div>\r\n                }\r\n                {this.state.editMode &&\r\n                  <div>\r\n                    <input onChange={this.onStatusChange} autoFocus onBlur={this.deactivateEditMode} value={this.state.status || ''}/>\r\n                  </div>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./profileInfo.module.css\"\r\nimport {ProfileType} from \"redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatus} from './ProfileStatus'\r\nimport userPhoto from \"../../../assests/images/user.jpg\";\r\n\r\ntype ProfileInfoProps = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File)=>void\r\n}\r\n\r\nexport const ProfileInfo = React.memo((props: ProfileInfoProps) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    console.log(props.isOwner)\r\n    const onMainPhotoSelected = (e:ChangeEvent<HTMLInputElement>) => {\r\n        if(e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return (<div>\r\n            <div>\r\n                <img src={\"https://www.designmantic.com/blog/wp-content/uploads/2013/09/Logo-Unique-718x300.jpg\"}/>\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <p>{props.profile.aboutMe}</p>\r\n                <p>{props.profile.userId}</p>\r\n                <img src={props.profile.photos.large || userPhoto} alt={props.profile.photos.large} className={s.mainPhoto}/>\r\n                {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n})","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"myPost_postsBlock__dHh7S\",\"posts\":\"myPost_posts__GuGAe\"};","import React, {useState} from \"react\";\r\n\r\ntype PostProps = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post = (props: PostProps) => {\r\n    const [num, setNum] = useState(true);\r\n    return <div>\r\n        <img width={\"20px\"}\r\n             src={\"https://media.istockphoto.com/id/1300845620/ru/%D0%B2%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F/%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C-icon-flat-%D0%B8%D0%B7%D0%BE%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD-%D0%BD%D0%B0-%D0%B1%D0%B5%D0%BB%D0%BE%D0%BC-%D1%84%D0%BE%D0%BD%D0%B5-%D1%81%D0%B8%D0%BC%D0%B2%D0%BE%D0%BB-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F-%D0%B8%D0%BB%D0%BB%D1%8E%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%B2%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D0%B0.jpg?s=612x612&w=0&k=20&c=Po5TTi0yw6lM7qz6yay5vUbUBy3kAEWrpQmDaUMWnek=\"}/>\r\n        {props.message}\r\n        <div><span>like</span> {props.likesCount}</div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport s from \"./myPost.module.css\"\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {useFormik} from \"formik\";\r\nimport {maxLengthFn, requiredFn} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/Preloader/FormsControls/FormsControls\";\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType)=> {\r\n\r\n    return <div className={s.postsBlock}>\r\n        <h3>My posts</h3>\r\n        <AddNewPostForm addPost={props.addPost}/>\r\n        <div className={s.posts}>\r\n            {\r\n                props.posts.map((el) => {\r\n                    return <Post key={el.id} message={el.message} likesCount={el.likesCount}/>\r\n                })\r\n            }\r\n        </div>\r\n    </div>\r\n})\r\n\r\ntype AddNewPostForm = {\r\n    addPost: (value: string) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    newPostBody?: string\r\n}\r\n\r\nconst AddNewPostForm = (props: AddNewPostForm) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPostBody: \"\",\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {}\r\n            if (requiredFn(values.newPostBody)) {\r\n                errors.newPostBody = requiredFn(values.newPostBody)\r\n            }\r\n            if (maxLengthFn(30)(values.newPostBody)) {\r\n                errors.newPostBody = maxLengthFn(30)(values.newPostBody)\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.addPost(values.newPostBody)\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <div>\r\n                <Textarea placeholder={\"Enter your message\"} name={\"newPostBody\"} value={formik.values.newPostBody}\r\n                          onChange={formik.handleChange} touched={formik.touched.newPostBody} errors={formik.errors.newPostBody}/>\r\n                </div>\r\n                <div>\r\n                    <button type={\"submit\"}>Add post</button>\r\n                </div>\r\n            </div>\r\n        </form>)\r\n}","import React from \"react\";\r\nimport {addPostActionCreator, PostType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStatePropsType = {\r\n    posts: PostType[]\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    addPost: (text: string) => void\r\n}\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchToProps\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        addPost: (text: string) => {\r\n            if (text) dispatch(addPostActionCreator(text))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts)","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype ProfileProps = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File)=>void\r\n}\r\n\r\nexport const Profile = (props: ProfileProps) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} savePhoto={props.savePhoto}/>\r\n            <NavLink to={`/profile/${30953}`}>'asdfasdf'</NavLink>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfile, getStatus, ProfileType, updateStatus, savePhoto} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {Dialogs} from \"components/Dialogs/Dialogs\";\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    console.log('mapStateToProps PROFILE')\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nconst mapDispatchToProps: MapDispatchToProps = {\r\n    getProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto\r\n}\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId: number | string | null = this.props.match.params.userId;\r\n        if (!userId) {\r\n            // userId = 30679\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) this.props.history.push(\"/login\")\r\n        } else {\r\n            userId = Number(userId)\r\n        }\r\n        console.log(\"userId\",userId)\r\n\r\n\r\n        userId && this.props.getProfile(userId)\r\n        userId && this.props.getStatus(userId)\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: any, snapshot: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(\"render PROFILE\")\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} isOwner={!this.props.match.params.userId} profile={this.props.profile} status={this.props.status}\r\n                         updateStatus={this.props.updateStatus} savePhoto={this.props.savePhoto}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), withRouter, withAuthRedirect)(ProfileContainer)\r\n\r\n//types\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    getProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photo: File)=>void\r\n}\r\n\r\nexport type OwnPropsType = MapStatePropsType & MapDispatchToProps\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType"],"names":["ProfileStatus","state","editMode","status","props","activateEditMode","console","log","setState","deactivateEditMode","updateStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","snapshot","this","style","display","onDoubleClick","onChange","autoFocus","onBlur","React","ProfileInfo","profile","Preloader","isOwner","src","className","s","aboutMe","userId","photos","large","userPhoto","alt","type","target","files","length","savePhoto","Post","useState","width","message","likesCount","MyPosts","AddNewPostForm","addPost","posts","map","el","id","formik","useFormik","initialValues","newPostBody","validate","values","errors","requiredFn","maxLengthFn","onSubmit","resetForm","handleSubmit","placeholder","name","handleChange","touched","MyPostsContainer","connect","profilePage","dispatch","text","addPostActionCreator","Profile","to","mapDispatchToProps","getProfile","getStatus","ProfileContainer","match","params","Number","authorizedUserId","history","push","refreshProfile","compose","auth","isAuth","withRouter","withAuthRedirect"],"sourceRoot":""}