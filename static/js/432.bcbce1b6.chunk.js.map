{"version":3,"file":"static/js/432.bcbce1b6.chunk.js","mappings":"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","sources":["webpack://social-network-react/./src/components/Profile/ProfileInfo/profileInfo.module.css?987e","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-network-react/./src/components/Profile/MyPosts/myPost.module.css?89e8","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"profileInfo_descriptionBlock__SN6sV\",\"mainPhoto\":\"profileInfo_mainPhoto__7m-36\",\"contact\":\"profileInfo_contact__LqVEX\"};","import React, {ChangeEvent} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusType> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        // debugger; // eslint-disable-line no-debugger\r\n        console.log(\"this\",this)\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n       this.setState({status: e.currentTarget.value})\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<Record<string, never>>, snapshot?: any) {\r\n        if(prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{display: \"flex\"}}><b>status:&nbsp;</b>\r\n                {!this.state.editMode &&\r\n                  <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || \"no status\"}</span>\r\n                  </div>\r\n                }\r\n                {this.state.editMode &&\r\n                  <div>\r\n                    <input onChange={this.onStatusChange} autoFocus onBlur={this.deactivateEditMode} value={this.state.status || ''}/>\r\n                  </div>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import {ContactType, ProfileSave, ProfileType} from \"redux/profile-reducer\";\r\nimport React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {maxLengthFn, requiredFn} from \"utils/validators/validators\";\r\nimport {Input, Textarea} from \"components/common/Preloader/FormsControls/FormsControls\";\r\n\r\nexport const ProfileDataForm = ({profile, saveProfile, goToEditMode}: ProfileDataFormProps) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: profile.fullName,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            aboutMe: profile.aboutMe,\r\n            ...profile.contacts,\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {}\r\n            if (requiredFn(values.fullName)) {\r\n                errors.fullName = requiredFn(values.fullName)\r\n            }\r\n            if (maxLengthFn(30)(values.fullName)) {\r\n                errors.fullName = maxLengthFn(30)(values.fullName)\r\n            }\r\n\r\n            if (requiredFn(values.youtube)) {\r\n                errors.youtube = requiredFn(values.youtube)\r\n            }\r\n            if (maxLengthFn(30)(values.youtube)) {\r\n\r\n                errors.youtube = maxLengthFn(30)(values.youtube)\r\n            }\r\n            console.log(errors)\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            saveProfile({\r\n                fullName: values.fullName,\r\n                lookingForAJob: values.lookingForAJob,\r\n                lookingForAJobDescription: values.lookingForAJobDescription,\r\n                aboutMe: values.aboutMe,\r\n                contacts: {\r\n                    youtube: values.youtube,\r\n                    facebook: values.facebook,\r\n                    github: values.github,\r\n                    instagram: values.instagram,\r\n                    mainLink: values.mainLink,\r\n                    twitter: values.twitter,\r\n                    website: values.website,\r\n                    vk: values.vk\r\n                }\r\n            })\r\n            goToEditMode(false)\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <button onClick={() => {\r\n                }}>save\r\n                </button>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <b>Full name</b>: <Input placeholder={\"Full name\"}\r\n                                             type=\"text\"\r\n                                             {...formik.getFieldProps('fullName')}\r\n                                             touched={formik.touched.fullName} errors={formik.errors.fullName}\r\n                />\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job</b>: <input type={\"checkbox\"} name={\"lookingForAJob\"}\r\n                                                     onChange={formik.handleChange}\r\n                                                     checked={formik.values.lookingForAJob}/>\r\n                </div>\r\n                <div><b>My professional skills</b>:\r\n                    <Textarea placeholder={\"My professional skills\"}\r\n                              {...formik.getFieldProps('lookingForAJobDescription')}\r\n                              touched={formik.touched.lookingForAJobDescription}\r\n                              errors={formik.errors.lookingForAJobDescription}/>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: <Textarea placeholder={\"About me\"}\r\n                                           {...formik.getFieldProps('aboutMe')}\r\n                                           touched={formik.touched.aboutMe}\r\n                                           errors={formik.errors.aboutMe}/>\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map((key) => {\r\n                // const keys: string = `${key}`\r\n                const errors: FormikErrorType = formik.errors;\r\n                const touched: FormikTouchedType = formik.touched;\r\n                return <div key={key}>\r\n                    <Input\r\n                        placeholder={key}\r\n                        type=\"text\"\r\n                        {...formik.getFieldProps(key)}\r\n                        touched={touched[key]}\r\n                        errors={errors[key]}\r\n                    />\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n//types\r\ntype ProfileDataFormProps = {\r\n    profile: ProfileType,\r\n    saveProfile: (profile: ProfileSave) => void\r\n    goToEditMode: (active: boolean) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    [key: string]: any,\r\n}\r\n\r\ntype FormikTouchedType = {\r\n    [key: string]: any,\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./profileInfo.module.css\"\r\nimport {ContactType, ProfileSave, ProfileType, updateStatus} from \"redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatus} from './ProfileStatus'\r\nimport userPhoto from \"../../../assests/images/user.jpg\";\r\nimport {ProfileDataForm} from \"components/Profile/ProfileInfo/ProfileDataForm\";\r\n\r\ntype ProfileInfoProps = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (profile: ProfileSave) => void\r\n}\r\n\r\nexport const ProfileInfo = React.memo(({profile, ...props}: ProfileInfoProps) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    console.log(props.isOwner)\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const goToEditMode = (active: boolean) => {\r\n        setEditMode(active)\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src={\"https://www.designmantic.com/blog/wp-content/uploads/2013/09/Logo-Unique-718x300.jpg\"}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} alt={profile.photos.large} className={s.mainPhoto}/>\r\n                {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode ? <ProfileDataForm profile={profile} saveProfile={props.saveProfile} goToEditMode={goToEditMode}/> : <ProfileData profile={profile} isOwner={props.isOwner} goToEditMode={goToEditMode}/>}\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype ProfileData = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: (active: boolean)=> void\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileData) => {\r\n    return (\r\n        <div>\r\n            <div onClick={()=>goToEditMode(true)}><button>edit</button></div>\r\n            <div>\r\n                <div>\r\n                    <b>Full name</b>: {profile.fullName}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                </div>\r\n                {profile.lookingForAJob &&\r\n                  <div><b>My professional skills</b>: {profile.lookingForAJobDescription}</div>}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map((key: string) => {\r\n                    const keys = profile.contacts[key as keyof typeof profile.contacts] as keyof ContactType\r\n                return <Contact key={key} contactTitle={key}\r\n                                contactValue={keys}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Contact = ({contactTitle, contactValue}: { contactTitle: string, contactValue:  keyof  ContactType }) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue ? contactValue : \"\"}</div>\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"myPost_postsBlock__dHh7S\",\"posts\":\"myPost_posts__GuGAe\"};","import React, {useState} from \"react\";\r\n\r\ntype PostProps = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post = (props: PostProps) => {\r\n    const [num, setNum] = useState(true);\r\n    return <div>\r\n        <img width={\"20px\"}\r\n             src={\"https://media.istockphoto.com/id/1300845620/ru/%D0%B2%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F/%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C-icon-flat-%D0%B8%D0%B7%D0%BE%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD-%D0%BD%D0%B0-%D0%B1%D0%B5%D0%BB%D0%BE%D0%BC-%D1%84%D0%BE%D0%BD%D0%B5-%D1%81%D0%B8%D0%BC%D0%B2%D0%BE%D0%BB-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F-%D0%B8%D0%BB%D0%BB%D1%8E%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%B2%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D0%B0.jpg?s=612x612&w=0&k=20&c=Po5TTi0yw6lM7qz6yay5vUbUBy3kAEWrpQmDaUMWnek=\"}/>\r\n        {props.message}\r\n        <div><span>like</span> {props.likesCount}</div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport s from \"./myPost.module.css\"\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {useFormik} from \"formik\";\r\nimport {maxLengthFn, requiredFn} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/Preloader/FormsControls/FormsControls\";\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType)=> {\r\n\r\n    return <div className={s.postsBlock}>\r\n        <h3>My posts</h3>\r\n        <AddNewPostForm addPost={props.addPost}/>\r\n        <div className={s.posts}>\r\n            {\r\n                props.posts.map((el) => {\r\n                    return <Post key={el.id} message={el.message} likesCount={el.likesCount}/>\r\n                })\r\n            }\r\n        </div>\r\n    </div>\r\n})\r\n\r\ntype AddNewPostForm = {\r\n    addPost: (value: string) => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    newPostBody?: string\r\n}\r\n\r\nconst AddNewPostForm = (props: AddNewPostForm) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPostBody: \"\",\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {}\r\n            if (requiredFn(values.newPostBody)) {\r\n                errors.newPostBody = requiredFn(values.newPostBody)\r\n            }\r\n            if (maxLengthFn(30)(values.newPostBody)) {\r\n                errors.newPostBody = maxLengthFn(30)(values.newPostBody)\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.addPost(values.newPostBody)\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <div>\r\n                <Textarea placeholder={\"Enter your message\"} name={\"newPostBody\"} value={formik.values.newPostBody}\r\n                          onChange={formik.handleChange} touched={formik.touched.newPostBody} errors={formik.errors.newPostBody}/>\r\n                </div>\r\n                <div>\r\n                    <button type={\"submit\"}>Add post</button>\r\n                </div>\r\n            </div>\r\n        </form>)\r\n}","import React from \"react\";\r\nimport {addPostActionCreator, PostType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStatePropsType = {\r\n    posts: PostType[]\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    addPost: (text: string) => void\r\n}\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchToProps\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        addPost: (text: string) => {\r\n            if (text) dispatch(addPostActionCreator(text))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts)","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileSave, ProfileType} from \"../../redux/profile-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype ProfileProps = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (profile: ProfileSave) => void\r\n}\r\n\r\nexport const Profile = (props: ProfileProps) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status}\r\n                         updateStatus={props.updateStatus} savePhoto={props.savePhoto} saveProfile={props.saveProfile}/>\r\n            <NavLink to={`/profile/${30953}`}>'asdfasdf'</NavLink>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfile,\r\n    getStatus,\r\n    ProfileType,\r\n    updateStatus,\r\n    savePhoto,\r\n    ProfileSave,\r\n    saveProfile\r\n} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {Dialogs} from \"components/Dialogs/Dialogs\";\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    console.log('mapStateToProps PROFILE')\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nconst mapDispatchToProps: MapDispatchToProps = {\r\n    getProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile\r\n}\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId: number | string | null = this.props.match.params.userId;\r\n        if (!userId) {\r\n            // userId = 30679\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) this.props.history.push(\"/login\")\r\n        } else {\r\n            userId = Number(userId)\r\n        }\r\n        console.log(\"userId\",userId)\r\n\r\n\r\n        userId && this.props.getProfile(userId)\r\n        userId && this.props.getStatus(userId)\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: any, snapshot: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(\"render PROFILE\")\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} isOwner={!this.props.match.params.userId} profile={this.props.profile} status={this.props.status}\r\n                         updateStatus={this.props.updateStatus} savePhoto={this.props.savePhoto}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), withRouter, withAuthRedirect)(ProfileContainer)\r\n\r\n//types\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    getProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photo: File)=>void\r\n    saveProfile: (profile: ProfileSave) => void\r\n}\r\n\r\nexport type OwnPropsType = MapStatePropsType & MapDispatchToProps\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType"],"names":["ProfileStatus","state","editMode","status","props","activateEditMode","console","log","setState","deactivateEditMode","updateStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","snapshot","this","style","display","onDoubleClick","onChange","autoFocus","onBlur","React","ProfileDataForm","profile","saveProfile","goToEditMode","formik","useFormik","initialValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","validate","values","errors","requiredFn","maxLengthFn","youtube","onSubmit","facebook","github","instagram","mainLink","twitter","website","vk","resetForm","handleSubmit","onClick","I","placeholder","type","getFieldProps","touched","name","handleChange","checked","Object","keys","map","key","ProfileInfo","useState","setEditMode","Preloader","isOwner","active","src","className","s","photos","large","userPhoto","alt","target","files","length","savePhoto","ProfileData","Contact","contactTitle","contactValue","Post","width","message","likesCount","MyPosts","AddNewPostForm","addPost","posts","el","id","newPostBody","MyPostsContainer","connect","profilePage","dispatch","text","addPostActionCreator","Profile","to","mapDispatchToProps","getProfile","getStatus","ProfileContainer","userId","match","params","Number","authorizedUserId","history","push","refreshProfile","compose","auth","isAuth","withRouter","withAuthRedirect"],"sourceRoot":""}